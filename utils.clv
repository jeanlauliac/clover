fn main() {
  let code = __read_file("./clover_comp.clv");
  let state = {
    code: code,
    phase: "module",
    token: None {},
    next_token: None {},
  };

  read_token(&state);
  read_token(&state);

  let module = read_module(&state);

  __write("#!/usr/bin/env node\n\n");
}

fn read_module(ref state: State) {
  let module = {functions: vec[]};
  while (state.token isnt End_of_file) {
    read_module_declaration(&state, &module);
  }
  return module;
}

fn has_keyword(ref state: State, ref value: string) {
  return state.token is Keyword && state.token.value == value;
}

fn read_token(ref state: State) {
  let whitespace = set [' ', '\n'];
  while (state.i < state.code.length && whitespace[state.code[state.i]]) {
    ++state.i;
  }
  let token = None {};
  if (state.i == state.code.length) {
    token = End_of_file {};
  } else if (true) {
    token = Identifier {value: state.code[state.i]};
    ++state.i;

  } else {
    token = Invalid {};
  }
  state.token = state.next_token;
  state.next_token = token;
}
