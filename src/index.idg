
struct State {
  token: tokens.Token,
  code: str,
  i: u32,
}

enum Expression {
  Bool_literal {value: bool},
  Character_literal {value: char},
  In_place_assignment {
    operator: str,
    operation: str,
    target: Expression,
    is_prefix: bool
  },
  Qualified_name {value: vec<str>},
  String_literal {value: str},
  Number_literal {value: str},
  Unary_operation {operator: str, operand: Expression},
  Identity_test {is_negative: bool, operand: Expression, variant: vec<str>},
  Object_literal {typeName: vec<str>, fields: vec<Object_field>},
  Collection_access {collectionName: vec<str>, key: Expression},
  Function_call {functionName: vec<str>, arguments: vec<Call_argument>},
  Collection_literal {
    dataType: str,
    item_type: Type_reference,
    values: vec<Expression>,
  },
}

struct Object_field {
  name: str,
  value: Object_field_value,
}

struct Type_reference {
  name: vec<str>,
  parameters: vec<Type_reference>,
}

struct Call_argument {
  is_by_reference: bool,
  value: Expression,
}

fn __read_expression(ref state: State): Expression {}

fn read_primary_expression(
  ref state: State,
): Expression {

  if (state.token is tokens.String) {
    let value = state.token.value;
    state->read_token();
    return String_literal {value};
  }
  if (state.token is tokens.Number) {
    let value = state.token.value;
    state->read_token();
    return Number_literal {value};
  }
  if (state.token is tokens.Character) {
    let value = state.token.value;
    state->read_token();
    return Character_literal {value};
  }
  if (has_keyword(state, "true")) {
    state->read_token();
    return Bool_literal {value: true};
  }
  if (has_keyword(state, "false")) {
    state->read_token();
    return Bool_literal {value: false};
  }

  if (has_operator(state, "(")) {
    state->read_token();
    let expression = __read_expression(&state);
    expect has_operator(state, ")");
    state->read_token();
    return expression;
  }

  if (state.token is tokens.Operator && has_operator(state, "++")) {
    let operator = state.token.value;
    state->read_token();
    let target = state->read_primary_expression();
    return In_place_assignment {operator, operation: "++",
        target, is_prefix: true};
  }

  if (state.token is tokens.Operator && (has_operator(state, "!") || has_operator(state, "-"))) {
    let operator = state.token.value;
    state->read_token();
    let operand = read_primary_expression(&state);
    return Unary_operation {operator, operand};
  }

  if (state.token is tokens.Keyword &&
      (has_keyword(state, "set") || has_keyword(state, "vec"))) {
    let dataType = state.token.value;
    state->read_token();

    let item_type = Type_reference {
      name: vec<str> [],
      parameters: vec<Type_reference> [],
    };
    if (has_operator(state, "<")) {
      state->read_token();

      item_type = read_type_name(&state);
      expect has_operator(state, ">");
      state->read_token();
    }

    expect has_operator(state, "[");
    state->read_token();
    let values = vec<Expression> [];
    while (!has_operator(state, "]")) {
      let expression = __read_expression(&state);
      values->push(expression);
      if (has_operator(state, ",")) {
        state->read_token();
      } else {
        expect has_operator(state, "]");
      }
    }
    state->read_token();
    return Collection_literal {dataType, item_type, values};
  }

  let qualified_name = vec<str> [];
  if (state.token is tokens.Identifier) {
    qualified_name = read_qualified_name(&state);
  }

  if (has_operator(state, "{")) {
    state->read_token();
    let fields = vec<Object_field> [];
    while (state.token is tokens.Identifier) {
      let name = state.token.value;
      state->read_token();
      let value = read_object_field_value(&state);
      if (has_operator(state, ",")) {
        state->read_token();
      } else {
        expect has_operator(state, "}");
      }
      fields->push(Object_field {name, value});
    }
    expect has_operator(state, "}");
    state->read_token();
    return Object_literal {typeName: qualified_name, fields};
  }
  expect size_of(qualified_name) > 0;

  if (has_operator(state, "[")) {
    state->read_token();
    let key = __read_expression(&state);
    expect has_operator(state, "]");
    state->read_token();
    return Collection_access {collectionName: qualified_name, key};
  }

  if (has_operator(state, "(")) {
    state->read_token();
    return Function_call {
      functionName: qualified_name,
      arguments: read_function_arguments(&state),
    };
  }
  return Qualified_name {value: qualified_name};
}

fn read_function_arguments(ref state: State): vec<Call_argument> {
  let arguments = vec<Call_argument> [];
  while (!has_operator(state, ")")) {
    arguments->push(read_call_argument(&state));
    if (has_operator(state, ",")) {
      state->read_token();
    } else {
      expect has_operator(state, ")");
    }
  }
  state->read_token();
  return arguments;
}

fn read_qualified_name(ref state: State): vec<str> {
  expect state.token is tokens.Identifier;
  let qualified_name = vec<str> [state.token.value];
  state->read_token();
  while (has_operator(state, ".")) {
    state->read_token();
    expect state.token is tokens.Identifier;
    qualified_name->push(state.token.value);
    state->read_token();
  }
  return qualified_name;
}

enum Object_field_value {
  Shorthand_field_value {},
  Expression_field_value {expression: Expression},
}

fn read_object_field_value(ref state: State): Object_field_value {
  if (!has_operator(state, ":")) {
    return Shorthand_field_value {};
  }
  state->read_token();
  return Expression_field_value {expression: __read_expression(&state)};
}

fn read_call_argument(ref state: State): Call_argument {
  let is_by_reference = false;
  if (has_operator(state, "&")) {
    state->read_token();
    is_by_reference = true;
  }
  return Call_argument {value: __read_expression(&state), is_by_reference};
}

fn read_type_name(ref state: State): Type_reference {
  let name = vec<str> [];
  if (state.token is tokens.Keyword && (
        has_keyword(state, "set") ||
        has_keyword(state, "vec") ||
        has_keyword(state, "dict")
      )) {
    name = vec<str> [state.token.value];
    state->read_token();
  } else {
    name = read_qualified_name(&state);
  }
  let parameters = vec<Type_reference> [];
  if (has_operator(state, "<")) {
    state->read_token();
    while (!has_operator(state, ">")) {
      parameters->push(read_type_name(&state));
      if (has_operator(state, ",")) {
        state->read_token();
      }
    }
    expect has_operator(state, ">");
    state->read_token();
  }
  return Type_reference {name, parameters};
}

fn has_keyword(state: State, value: str): bool {
  return state.token is tokens.Keyword && state.token.value == value;
}

fn has_operator(state: State, value: str): bool {
  return state.token is tokens.Operator && state.token.value == value;
}

fn read_token(ref state: State) {
  tokens.read_whitespace(&state);
  state.token = tokens.read_next(&state);
}
