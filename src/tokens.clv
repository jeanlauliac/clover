
fn read_string_literal(ref state: State): String {
  ++state.i;
  let value = "";
  while (state.i < __size(state.code) && state.code[state.i] != '"') {
    if (state.code[state.i] == '\\')  {
      ++state.i;
      value = value + get_escaped_char(state.code[state.i]);
    } else {
      value = value + state.code[state.i];
    }
    ++state.i;
  }
  invariant(state.i < __size(state.code));
  let token = String {value};
  ++state.i;
  return token;
}

fn read_character_literal(ref state: State): Character {
  ++state.i;
  invariant(state.i < __size(state.code));
  let value = ' ';
  if (state.code[state.i] == '\\') {
    ++state.i;
    invariant(state.i < __size(state.code));
    value = get_escaped_char(state.code[state.i]);
  } else {
    value = state.code[state.i];
  }
  ++state.i;
  invariant(state.i < __size(state.code) && state.code[state.i] == '\'');
  ++state.i;
  return Character {value: value};
}

fn is_numeric(c: char): bool {
  return c >= '0' && c <= '9';
}

fn get_escaped_char(code: char): char {
  if (code == 'n') {
    return '\n';
  }
  invariant (code == '\\' || code == '\'' || code == '"');
  return code;
}
