'Cannot override u32 argument':
  stdout: ''
  files:
    index.idg: >
      fn main() {
        let a = 1;
        override(a);
        if (a != 1) __die("fail");
      }

      fn override(a: u32) {
        a = 10;
      }

'Cannot override string argument':
  stdout: ''
  files:
    index.idg: >
      fn main() {
        let a = "foo";
        override(a);
        if (a != "foo") __die("fail");
      }

      fn override(a: str) {
        a = "bar";
      }

'Cannot override object argument':
  stdout: ''
  files:
    index.idg: >
      struct Foo {value: u32}

      fn main() {
        let a = Foo {value: 1};
        override(a);
        if (a.value != 1) __die("fail");
      }

      fn override(a: Foo) {
        a = Foo {value: 10};
      }

'Cannot append items to vector argument':
  stdout: ''
  skip: true
  files:
    index.idg: >
      fn main() {
        let v = vec<u32> [10];
        override(v);
        if (size_of(v) != 1) __die("fail");
      }

      fn override(a: vec<u32>) {
        a->push(20);
      }

'Cannot override item of vector argument':
  stdout: ''
  skip: true
  files:
    index.idg: >
      fn main() {
        let v = vec<u32> [10];
        override(v);
        if (size_of(v) != 1) __die("fail");
        if (a[0] != 10) __die("fail");
      }

      fn override(a: vec<u32>) {
        a[0] = 20;
      }

'Cannot override field of an object argument':
  stdout: ''
  files:
    index.idg: >
      struct Foo {value: u32}

      fn main() {
        let a = Foo {value: 1};
        override(a);
        if (a.value != 1) __die("fail");
      }

      fn override(a: Foo) {
        a.value = 10;
      }

'Cannot override 2-level-deep field of an object argument':
  stdout: ''
  files:
    index.idg: >
      struct Foo {value: Bar}
      struct Bar {deep_value: u32}

      fn main() {
        let a = Foo {value: Bar {deep_value: 1}};
        override(a);
        if (a.value.deep_value != 1) __die("fail");
      }

      fn override(a: Foo) {
        a.value.deep_value = 10;
      }
